version: '3'

services:
  # Django web container for the Django app
  django:
    build:
      context: ./backend/
      dockerfile: Dockerfile
    container_name: 'django'
    volumes:
      - ./backend:/app/
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - app-network
    restart:
      on-failure

  # Database container for PostgreSQL
  db:
    image: postgres:bullseye
    container_name: 'db'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  # pgAdmin container for database management
  # pgadmin4:
  #   image: dpage/pgadmin4
  #   container_name: 'pgadmin4'
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - db
  #   networks:
  #     - app-network
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin/

  nginx:
    container_name: 'nginx'
    build:
      context: ./
      dockerfile: nginx/Dockerfile
    volumes:
      - ./frontend:/usr/share/nginx/html
    ports:
      - "3000:3000"
    networks:
      - app-network
    env_file:
      - .env

  # Daphne container for the websockets
  daphne:
    build:
      context: ./backend/
      dockerfile: Dockerfile.daphne
    container_name: 'daphne'
    volumes:
      - ./backend:/app/
    depends_on:
      - db
    env_file:
      - .env
    ports:
      - "8001:8001"
    networks:
      - app-network
    restart:
      on-failure

  # Redis container for the websockets
  redis:
    image: "redis:7.2.3-alpine"
    container_name: "redis"
    command: ["redis-server", "--bind", "redis", "--port", "6379"]
    # ports:
    #   - "6379:6379"
    networks:
      - app-network

# Store data persistently in named volumes
volumes:
  postgres_data:
  pgadmin_data:

# Define the networks
networks:
  app-network:
    name: ft_transcendence
    driver: bridge
